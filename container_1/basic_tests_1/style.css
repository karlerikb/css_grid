.style > div {
    padding: 1em;
    background: #eee;
}

.style > div:nth-child(odd) {
    background: #ddd;
}


.wrapper1 {
    /* creates the grid */
    display: grid;

    /* creates the column width */
    grid-template-columns: 30% 70%; /* two columns of 3:7 */
    grid-template-columns: 33% 33% 33%; /* three columns of ~1/3 */
    /* children of this element will be treated as grid items and laid down in the pattern specified above */

    /* creates the "gutter" between columns */
    grid-column-gap: 5em;

    /* creates the "gutter" between rows */
    grid-row-gap: 1em;

    /* sets the gutter for both the rows and columns */
    grid-gap: 1em;
}

.wrapper2 {
    display: grid;

    /* when using fractions, the gap works similarly as if the wrapper2 element has box-sizing: border-box set to it and some padding/margin is applied, it retains the size of the element, in this case the screen size */
    grid-template-columns: 1fr 2fr 1fr;

    /* repeats the pattern specified (as the second argument) by the number of times per row (the first argument) */
    grid-template-columns: repeat(1, 1fr 2fr 1fr);
    grid-template-columns: repeat(2, 1fr 2fr); /* one row has 1fr 2fr 1fr 2fr */

    /* sets the row height */
    grid-auto-rows: 10em; /* hardsets the row height and doesn't take into account the content of the grid item */
    grid-auto-rows: minmax(10em, auto); /* sets the row height to what's specified, but also automatically ajusts the row height if necessary */

    grid-gap: 1em;
}

.nested1 {
    padding: 1em;
    display: grid;

    grid-template-columns: repeat(3, 1fr);
    /* grid-auto-rows: 5em; */
    grid-auto-rows: minmax(1em, auto);
    grid-gap: 1em;
}

.nested1 > div {
    border: 1px solid #333;
    text-align: center;
}


.wrapper3 {
    display: grid;
    grid-template-columns: 1fr 3fr 1fr;
    grid-auto-rows: minmax(10em, auto);
    grid-gap: 1em;

    /* aligns the items left or right in their respective spaces, width is auto adjusted */
    justify-items: start; /* columns start where they should, but are not stretched all the way, only taking up the space they need, basically left align */
    justify-items: end; /* basically right align with item length adjusted to fit the content */
    justify-items: stretch; /* default */

    /* aligns the items up or down direction, height is auto adjusted */
    align-items: baseline;
    align-items: center;
    align-items: stretch;
    align-items: flex-end;
}

.box1 {
    align-self: stretch;
}
.box2 {
    align-self: start;
    justify-self: end;
}
.box3 {
    justify-self: center;
    align-self: center;
}



.wrapper4 {
    display: grid;
    grid-template-columns: 1fr 3fr 1fr;
    grid-auto-rows: minmax(10em, auto);
    grid-gap: 1em;

}

.box5 {
    grid-column: 1/3;
    grid-row: 1/3;
}
.box6 {
    grid-row: 1/3;
}
.box7 {

}
.box8 {
    grid-column: 3;
}